{"version":3,"sources":["warning.svg","components/Search.jsx","components/Terminals.jsx","components/Entrance.jsx","components/UseCdiService.js","components/CDIInput.jsx","components/UseDebounced.js","components/DlMap.jsx","components/App.js","index.js"],"names":["module","exports","Wrap","styled","div","InpWrap","StyledInput","input","Placeholder","span","Options","Option","GEO_BASE_URL","process","Search","selectAddress","pointAddress","cdi","useState","variants","setVariants","value","setInpValue","geoCode","cdiAddr","searchAddr","split","join","url","fetch","then","r","json","res","found","response","GeoObjectCollection","featureMember","map","item","address","GeoObject","metaDataProperty","GeocoderMetaData","text","coords","Point","pos","selectOption","catch","e","console","log","opt","useEffect","type","onChange","target","onKeyDown","keyCode","length","key","onClick","Button","Name","Phone","Wortable","Terminals","selectTerminal","pointCoords","balloonClickHandler","element","classList","contains","dataset","lat","lon","document","addEventListener","removeEventListener","terminals","index","id","terminal","latitude","longitude","terminalIsNotSelected","geometry","properties","hintContent","city","balloonContentBody","ReactDOMServer","renderToStaticMarkup","name","terminalAddress","show_phones","i","worktables","work_hours","data-address","data-lat","data-lon","className","options","preset","iconColor","Entrance","ymaps","entranceCoords","setEntranceCoords","showArea","entranceRef","setShowArea","get","draggable","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWidth","zIndex","modules","onDragend","newCoords","getCoordinates","distance","coordSystem","geo","getDistance","balloonContent","instanceRef","ref","pointStorageVal","cashlessOnly","cityID","code","country_code","fullName","inPrice","isAutoCity","isTerminal","label","nameString","noSendDoor","regionString","street","uString","UseCdiService","prevSuggestions","getQuery","filteredSuggestions","filter","el","settlement_kladr_id","city_kladr_id","query","filteredQuery","forEach","elem","str","region_with_type","area_with_type","city_with_type","settlement_with_type","Boolean","push","lengt","pointStr","indexOf","getCityStr","sugg","street_with_type","house","house_type","block","block_type","flat","flat_type","cities","c","Inp","ErrMesg","TerminalMesg","CDIInput","set","yandexResponse","setIsTerminal","setToast","setValue","setPrevSuggestions","cdiOptions","setCdiOptions","showError","setShowError","debouncedFetchAddress","func","delay","useRef","args","clearTimeout","current","setTimeout","UseDebouncedFunc","data","restrict_value","count","method","body","JSON","stringify","mode","headers","adresses","kladrList","suggestions","suitable","qc","kladr_id","source","result","onKeyUp","src","WarningSvg","alt","option","val","MapWrap","DlMap","pointRef","cdiAddress","setCdiAddress","setPointCoords","setPointAddress","mapRef","setMapRef","setYmaps","fetchAddressByCoords","full","defaultAddress","geolocation","mapStateAutoApply","geoObjects","position","setCenter","reverse","balloon","close","apikey","coordArr","onLoad","width","height","defaultState","center","zoom","suppressMapOpenBlock","Toast","App","toast","ReactDOM","render","StrictMode","getElementById"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,qC,y8rECG3C,IAAMC,EAAOC,IAAOC,IAAV,KAWJC,EAAUF,IAAOC,IAAV,KAWPE,EAAcH,IAAOI,MAAV,KAcXC,EAAcL,IAAOM,KAAV,KASXC,EAAUP,IAAOC,IAAV,KAWPO,EAASR,IAAOC,IAAV,KAWNQ,EAAY,qDADIC,uCACJ,yBAwFHC,EAtFA,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,cAAeC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,IAAU,EACvBC,mBAAS,IADc,mBAChDC,EADgD,KACtCC,EADsC,OAE1BF,mBAAS,IAFiB,mBAEhDG,EAFgD,KAEzCC,EAFyC,KAIjDC,EAAU,SAACC,GACf,IACMC,GADYD,GAAWH,GACAK,MAAM,KAAKC,KAAK,KACvCC,EAAG,UAAMhB,GAAN,OAAqBa,GAE9BI,MAAMD,GACHE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACJ,GAAIA,EAAK,CACP,IACMC,EADaD,EAAIE,SAASC,oBAAoBC,cAC3BC,KAAI,SAAAC,GAC3B,MAAO,CACLC,QAASD,EAAKE,UAAUC,iBAAiBC,iBAAiBC,KAC1DC,OAAQN,EAAKE,UAAUK,MAAMC,QAKjCC,EAAad,EAAM,QAQtBe,OAAM,SAAAC,GACLC,QAAQC,IAAI,eAAgBF,OAa5BF,EAAe,SAAAK,GACnBtC,EAAcsC,GACd/B,EAAY+B,EAAIb,SAChBpB,EAAY,KAed,OAZAkC,qBAAU,WACJtC,GAAcM,EAAYN,KAC7B,CAACA,IAEJsC,qBAAU,WACJrC,IACFK,EAAYL,GACZM,EAAQN,MAGT,CAACA,IAGF,kBAACf,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CACEiD,KAAK,OACLlC,MAAOA,EACPmC,SA5Bc,SAAAN,GACpB5B,EAAY4B,EAAEO,OAAOpC,QA4BfqC,UAlCgB,SAAAR,GAvCH,KAwCDA,EAAXS,SACyBpC,OAkC5B,kBAACf,EAAD,4GAGAW,GAAYA,EAASyC,OACnB,kBAAClD,EAAD,KACGS,EAASmB,KAAI,SAAAC,GAAI,OAChB,kBAAC5B,EAAD,CAAQkD,IAAKtB,EAAKC,QAASsB,QAAS,kBAAMd,EAAaT,KAAQA,EAAKC,aAGtE,K,sqBClJZ,IAAMuB,EAAS5D,IAAOC,IAAV,KAaNF,EAAOC,IAAOC,IAAV,KAIJ4D,EAAO7D,IAAOC,IAAV,KAIJ6D,EAAQ9D,IAAOC,IAAV,KAKL8D,EAAW/D,IAAOC,IAAV,KAqEC+D,EAjEG,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YAC7BC,EAAsB,SAACpB,GAC3B,IAAMqB,EAAUrB,EAAEO,OAClB,GAAIc,EAAQC,UAAUC,SAAS,mBAAoB,CAAC,IAAD,EACnBF,EAAQG,QAA9BC,EADyC,EACzCA,IAAKC,EADoC,EACpCA,IAAKpC,EAD+B,EAC/BA,QAClB4B,EAAe,CAACO,EAAKC,GAAMpC,KAc/B,OALAc,qBAAU,WAER,OADAuB,SAASC,iBAAiB,QAASR,GAC5B,kBAAMO,SAASE,oBAAoB,QAAST,MAClD,IAEEU,GAAcA,EAAUpB,OAG3B,oCACEoB,EAAU1C,KAAI,SAACC,EAAM0C,GAAP,OACZ,kBAAC,WAAD,CAAUpB,IAAKtB,EAAK2C,IAfI,SAAA3C,GAC5B,OAAK8B,IACGA,EAAY,KAAO9B,EAAK4C,SAASC,WAAaf,EAAY,KAAO9B,EAAK4C,SAASE,UAe/EC,CAAsB/C,GAAS,kBAAC,IAAD,CAC7BsB,IAAKtB,EAAK2C,GACVK,SAAU,CAAChD,EAAK4C,SAASC,SAAU7C,EAAK4C,SAASE,WACjDG,WAAY,CACVC,YAAY,GAAD,OAAKlD,EAAKmD,KAAV,YAAkBnD,EAAKC,SAClCmD,mBAAoBC,IAAeC,qBACjC,kBAAC,EAAD,KACE,sCAAOtD,EAAKmD,MAAS,6BACrB,kBAAC1B,EAAD,iHAA2BzB,EAAKuD,MAC/BvD,EAAK4C,SAASY,gBACdxD,EAAKyD,aAAezD,EAAKyD,YAAYpC,OAClCrB,EAAKyD,YAAY1D,KAAI,SAACC,EAAM0D,GAAP,OAAa,kBAAChC,EAAD,CAAOJ,IAAKoC,GAAI1D,MAClD,GACHA,EAAK2D,YAAc3D,EAAK2D,WAAW,IAAM3D,EAAK2D,WAAW,GAAGC,WACxD,kBAACjC,EAAD,6EAAwB,2BAAI3B,EAAK2D,WAAW,GAAGC,aAChD,GACJ,kBAACpC,EAAD,CACEqC,eAAc7D,EAAK4C,SAASY,gBAC5BM,WAAU9D,EAAK4C,SAASC,SACxBkB,WAAU/D,EAAK4C,SAASE,UACxBkB,UAAU,mBAJZ,iDAWNC,QAAS,CACPC,OAAQ,kBACRC,UAAW,aAET,QAtC4B,I,gcCnD/BvG,IAAOC,IAAV,KAAZ,IAgGeuG,EAzEE,SAAC,GAAsF,IAApFtC,EAAmF,EAAnFA,YAAauC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,eAAgBC,EAA+C,EAA/CA,kBAAmBC,EAA4B,EAA5BA,SACrEC,GADiG,EAAlBC,YACjE,IAsBlB,OACE,oCAUI5C,GAAeA,EAAYT,QAAUmD,EACnC,kBAAC,IAAD,CACExB,SAAU,CAAClB,EAtCL,KAuCNP,QA7BU,SAAAZ,GAClB,IAAML,EAASK,EAAEgE,IAAI,UACrBJ,EAAkBjE,IA4BV2D,QAAS,CACPW,WAAW,EACXC,UAAW,UACXC,YAAa,GACbC,YAAa,UACbC,cAAe,GACfC,YAAa,EACbC,OAAQ,KAGV,GAGJZ,GAAkBA,EAAejD,OAC/B,kBAAC,IAAD,CACE8D,QAAS,CAAC,0BAA2B,wBACrCnC,SAAUsB,EACVc,UA1CW,WACnB,IAAMC,EAAYZ,EAAYzB,SAASsC,iBACjCC,EAAWlB,EAAMmB,YAAYC,IAAIC,YAAYL,EAAWvD,GAE5DyC,EADEgB,EAlBU,IAmBM,GAEAF,IAqCZpB,QAAS,CACPW,WAAW,EACXV,OAAQ,kBACRC,UAAW,WAEblB,WAAY,CACVC,YAAa,6CACbyC,eAAgB,kMAElBC,YAAa,SAAAC,GAAG,OAAKpB,EAAcoB,KAEnC,KC7FZ,IAAMC,EAAkB,CACtBC,aAAc,IACd5C,KAAM,wFACN6C,OAAQ,OACRC,KAAM,4BACNC,aAAc,IACdC,SAAU,gGACVC,QAAS,IACTC,WAAY,IACZC,WAAY,IACZC,MAAO,gGACPC,WAAY,+FACZC,WAAY,IACZC,aAAc,gGACdC,OAAQ,IACRC,QAAS,GACT9H,MAAO,yFAwFM+H,EArFO,SAACC,EAAiBhI,GAkFtC,MAAO,CAAEiI,SApEQ,WACf,IAAIC,EAAwBF,GAAmBA,EAAgBzF,OAC3DyF,EAAgBG,QAAO,SAACC,GAGtB,OAFsBA,EAAGC,qBAAuBD,EAAGE,iBAE3BtB,EAAgBG,QAE1C,GAEAoB,EAAQ,GACRC,EAAgB,GAEpB,GAAIR,EAAgBzF,QACf2F,EAAoB3F,OACrByF,EAAgBS,SAAQ,SAAUC,GAChC,IAAMC,EAAM,CACVD,EAAKE,iBAAmBF,EAAKE,iBAAmB,GAChDF,EAAKG,eAAiBH,EAAKG,eAAiB,GAC5CH,EAAKI,eAAiBJ,EAAKI,eAAiB,GAC5CJ,EAAKK,qBAAuBL,EAAKK,qBAAuB,GACxD/I,GACAmI,OAAOa,SAAS1I,KAAK,KAEvBiI,EAAMU,KAAKN,WAEV,GAAIX,EAAgBzF,SACrB2F,EAAoBgB,MAAO,CAC7B,IAAMC,EAAW,CACfnC,GAAmBA,EAAgBY,aAAeZ,EAAgBY,aAAe,GACjFZ,GAAmBA,EAAgBc,QAAUd,EAAgBc,QAAQzH,MAAM,KAAK,GAAK,GACrF2G,GAAmBA,EAAgBU,WAAaV,EAAgBU,WAAa,GAC7E1H,GACAmI,OAAOa,SAAS1I,KAAK,KAEvBiI,EAAMU,KAAKE,GAEXnB,EAAgBS,SAAQ,SAAUC,GAChC,IAAIC,EAAM,CACRD,EAAKE,iBAAmBF,EAAKE,iBAAmB,GAChDF,EAAKG,eAAiBH,EAAKG,eAAiB,GAC5CH,EAAKI,eAAiBJ,EAAKI,eAAiB,GAC5CJ,EAAKK,qBAAuBL,EAAKK,qBAAuB,GACxD/I,GACAmI,OAAOa,SAAS1I,KAAK,KAEvBiI,EAAMU,KAAKN,WAGV,IAAKX,EAAgBzF,OAAQ,CAClC,IAAM4G,EAAW,CACfnC,GAAmBA,EAAgBY,aAAeZ,EAAgBY,aAAe,GACjFZ,GAAmBA,EAAgBc,QAAUd,EAAgBc,QAAQzH,MAAM,KAAK,GAAK,GACrF2G,GAAmBA,EAAgBK,SAAWL,EAAgBK,SAAW,GACzErH,GACAmI,OAAOa,SAAS1I,KAAK,KAEvBiI,EAAMU,KAAKE,GASb,OANAZ,EAAME,SAAQ,SAAUL,IACa,IAA/BI,EAAcY,QAAQhB,IACxBI,EAAcS,KAAKb,MAIhBI,GAGUa,WAjFA,SAACC,GAClB,MAAO,CACLA,EAAKV,iBAAmBU,EAAKV,iBAAmB,GAChDU,EAAKT,eAAiB,KAAOS,EAAKT,eAAiB,GACnDS,EAAKR,eAAkB,KAAOQ,EAAKR,eAAiB,GACpDQ,EAAKP,qBAAwB,KAAOO,EAAKP,qBAAuB,GAChEO,EAAKC,iBAAoB,KAAOD,EAAKC,iBAAmB,GACxDD,EAAKE,MAAS,KAAOF,EAAKG,WAAa,IAAMH,EAAKE,MAAQ,GAC1DF,EAAKI,MAAS,IAAMJ,EAAKK,WAAa,IAAML,EAAKI,MAAQ,GACzDJ,EAAKM,KAAQ,KAAON,EAAKO,UAAY,IAAMP,EAAKM,KAAO,IACvDzB,OAAOa,SAAS1I,KAAK,O,+zCCxBFwJ,OAAO7I,KAAI,SAAA8I,GAAC,OAAIA,EAAE1F,QAA3C,IAEMxF,EAAOC,IAAOC,IAAV,KAwBJiL,EAAMlL,IAAOI,MAAV,KAYHG,GAAUP,IAAOC,IAAV,KAcPO,GAASR,IAAOC,IAAV,KASNkL,GAAUnL,IAAOC,IAAV,KAMPmL,GAAepL,IAAOC,IAAV,KA0KHoL,GA5JE,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,IAAKC,EAA0D,EAA1DA,eAAgB7C,EAA0C,EAA1CA,WAAY8C,EAA8B,EAA9BA,cAA8B,KAAfC,SACxC1K,mBAAS,KAD8C,mBAC1EG,EAD0E,KACnEwK,EADmE,OAEnC3K,mBAAS,IAF0B,mBAE1EmI,EAF0E,KAEzDyC,EAFyD,OAG7C5K,mBAAS,IAHoC,mBAG1E6K,EAH0E,KAG9DC,EAH8D,OAK/C9K,mBAAS,IALsC,mBAK1E+K,EAL0E,KAK/DC,EAL+D,OAYhD9C,EAAcC,EAAiBhI,GAAxDiI,EAZyE,EAYzEA,SAAUoB,EAZ+D,EAY/DA,WAwDZyB,EC1JO,SAA8BC,EAAMC,GACjD,IAAMjE,EAAMkE,iBAAO,MAEnB,OAAO,WAAc,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAClBC,aAAapE,EAAIqE,SACjBrE,EAAIqE,QAAUC,YAAW,kBAAMN,EAAI,WAAJ,EAAQG,KAAOF,IDqJlBM,EArDT,WACnB,IAAKtL,EAEH,OADA2K,EAAc,KACP,EAGT,IACMY,EAAO,CACXC,gBAAgB,EAChBC,MAAO,GACPlD,MAAOvI,EAGPuL,KAAMtD,KAGRzH,MAVS,iDAUE,CACTkL,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,KAAM,OACNC,QAAS,CACP,8BAA8B,IAC9B,eAAgB,oCAGjBtL,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACJ,IAAMoL,EAAWpL,EAAI2K,KAAKtK,KAAI,SAAA2D,GAE5B,OADKA,EAAE5E,QAAO4E,EAAE5E,MAAQqJ,EAAWzE,IAC5BA,KAGT+F,EAAcqB,GAEd,IAAMC,EAAY,GAEZC,EAActL,EAAI2K,KAAKpD,QAAO,SAASC,GAC3C,IAAI+D,EAAwB,UAAbvL,EAAIsB,OAA6B,MAAVkG,EAAGgE,IAAwB,MAAVhE,EAAGgE,IAC1D,QAAKH,EAAU7D,EAAGiE,YAAaF,KAC7BF,EAAU7D,EAAGiE,WAAY,GAClB,MAMPH,EAAY3J,QAAuB,YAAb3B,EAAIsB,MAAoBuI,EAAmByB,MAEtEtK,OAAM,SAAAC,GACLC,QAAQC,IAAI,eAAgBF,QAI2B,KAkE7D,OAzCAI,qBAAU,WACHjC,GAAOyK,EAAmB,MAC9B,CAACzK,IAEJiC,qBAAU,WACR4I,EAAa,IAEb,IACMU,EAAO,CACXC,gBAAgB,EAChBC,MAAO,GACPlD,MAAO8B,GAMT7J,MAVS,iDAUE,CACTkL,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,KAAM,OACNC,QAAS,CACP,8BAA8B,IAC9B,eAAgB,oCAGjBtL,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACAA,GAAOA,EAAI2K,MAAQ3K,EAAI2K,KAAK,KAC9Bf,EAAS5J,EAAI2K,KAAK,GAAGe,QAAU1L,EAAI2K,KAAK,GAAGgB,QAAU3L,EAAI2K,KAAK,GAAGvL,OAE5DY,EAAI2K,KAAK,GAAG/B,OACfqB,EAAa,2bAKlBjJ,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,2BAA4BF,QAErD,CAACwI,IAGF,kBAAC,EAAD,KAEE,kBAACL,EAAD,CAAK9H,KAAK,OAAOC,SAlIG,SAAAN,GACtByI,GAAc,GACdE,EAAS3I,EAAEO,OAAOpC,QAgI4BA,MAAOA,EAAOwM,QAnEtC,SAAC3K,GAOvBiJ,OA6DGtD,GACC,kBAAC0C,GAAD,KACE,yBAAKuC,IAAKC,IAAYC,IAAI,KAD5B,wHAKD/B,GAAa,kBAACX,GAAD,KAAUW,GACvBF,GACC,kBAAC,GAAD,KACGA,EAAWzJ,KAAI,SAAAC,GAAI,OAClB,kBAAC,GAAD,CAAQuB,QAAS,kBApEN,SAAAmK,GAEnB,IAAMC,EAAMD,EAAON,QAAUM,EAAOL,QAAUK,EAAO5M,MACrDsK,GAAc,GACdE,EAASqC,GACTlC,EAAc,IACdP,EAAIyC,GA8D2BlL,CAAaT,IAAOsB,IAAKtB,EAAKmL,UAAWnL,EAAKlB,a,yLEnOjF,IAAM8M,GAAUhO,IAAOC,IAAV,MAkLEgO,GAzKD,SAAC,GAAkB,IAAhBxC,EAAe,EAAfA,SACXyC,EAAW,GADe,EAIMnN,mBAAS,IAJf,mBAIvBoN,EAJuB,KAIXC,EAJW,OAOcrN,mBAAS,IAPvB,mBAOvB2F,EAPuB,KAOPC,EAPO,OAQE5F,oBAAS,GARX,mBAQvB6F,EARuB,KAQbE,EARa,OAUQ/F,mBAAS,IAVjB,mBAUvBmD,EAVuB,KAUVmK,EAVU,OAWUtN,mBAAS,IAXnB,mBAWvBF,EAXuB,KAWTyN,EAXS,OAaFvN,mBAAS,MAbP,mBAavBwN,EAbuB,KAafC,EAbe,OAcJzN,mBAAS,MAdL,mBAcvB0F,EAduB,KAchBgI,EAdgB,OAeM1N,oBAAS,GAff,mBAevB2H,EAfuB,KAeX8C,EAfW,KAiBxBkD,EAAuB,SAAvBA,EAAwBhM,EAAQiM,GAEpC,IAAMlN,EAAG,qDArBSf,uCAqBT,gCAC4EgC,GAD5E,OACqFiM,EAAO,GAAK,cADjG,cAGTjN,MAAMD,GACHE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACJ,GAAIA,GACFA,EAAIE,UACJF,EAAIE,SAASC,qBACbH,EAAIE,SAASC,oBAAoBC,eACjCJ,EAAIE,SAASC,oBAAoBC,cAAc,GAAI,CACnD,IAAM0M,EACJ9M,EAAIE,SAASC,oBAAoBC,cAAc,GAAGI,UAAUC,iBAAiBC,iBAAiBC,KAChG6L,EAAgBM,QAEhBF,EAAqBhM,GAAQ,MAGhCI,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,SAAUF,OAGtCI,qBAAU,WACJsD,GAAS8H,GACX9H,EAAMoI,YAAY9H,IAAI,CACpB+H,mBAAmB,IAEpBnN,MAAK,SAAS8L,GACb,GAAIA,EAAQ,CACV,IAAM/K,EAAS+K,EAAOsB,WAAWC,SACjCT,EAAOU,UAAUvM,EAAQ,IACzB2L,EAAe3L,GAEfgM,EAAqB,YAAIhM,GAAQwM,UAAU1N,KAAK,YAMrD,CAACiF,EAAO8H,IA+BXpL,qBAAU,WACJe,GAAeqK,GAAQA,EAAOY,QAAQC,UACzC,CAAClL,EAAaqK,IAqBjB,OACE,kBAAC,IAAD,CAAO9E,MAAO,CAAE4F,OAlHE3O,yCAmHhB,kBAAC,GAAD,CACE4K,IAAK8C,EACL7C,eAAgB1K,EAChB6H,WAAYA,EACZ8C,cAAeA,EACfC,SAAUA,IAEZ,kBAACuC,GAAD,KACE,kBAAC,EAAD,CAAQlN,IAAKqN,EAAYvN,cA3CT,SAACwB,GAAU,IACvBC,EAAoBD,EAApBC,QACFiN,EADsBlN,EAAXM,OACOnB,MAAM,KAAK2N,UAEnCb,EAAeiB,GACfhB,EAAgBjM,GAChBsE,EAAkB,IAClB4H,EAAOU,UAAUK,EAJJ,KAwC8CzO,aAAcA,IACrE,kBAAC,IAAD,CACE0G,QAAS,CAAC,cAAe,UAAW,mBACpCgI,OAAQd,EACR9K,QAlES,SAAAZ,GAIf,GAHAyI,GAAc,IAGT5E,EAAU,CACb,IAAMlE,EAASK,EAAEgE,IAAI,UAErBsH,EAAe3L,GACfgM,EAAqB,YAAIhM,GAAQwM,UAAU1N,KAAK,QA2D5CgO,MAAO,OACPC,OAAQ,QACRC,aAAc,CAAEC,OAAQ,CAAC,MAAO,OAAQC,KAAM,IAC9CvJ,QAAS,CAAEwJ,sBAAsB,GACjC7H,YAAawG,GAGXtK,GAAeA,EAAYT,OACzB,kBAAC,IAAD,CACE8D,QAAS,CAAC,0BAA2B,wBACrCC,UAjEI,WAChB,IAAMC,EAAYyG,EAAS9I,SAASsC,iBACpC2G,EAAe5G,GACfiH,EAAqB,YAAIjH,GAAWyH,UAAU1N,KAAK,MACnDgK,GAAc,IA8DFpG,SAAUlB,EACVmC,QAAS,CAAEW,WAAYJ,GACvBvB,WAAY,CACVC,YAAazE,EACbkH,eAAgB,8BAAgClH,EAAe,UAEjEmH,YAAa,SAAAC,GAAG,OAAKiG,EAAWjG,KAEhC,GAEN,kBAAC,EAAD,CACEvB,eAAgBA,EAChBC,kBAAmBA,EACnBzC,YAAaA,EACb0C,SAAUA,EACVE,YAAaA,EACbL,MAAOA,IAOT,kBAAC,EAAD,CAAWxC,eApEI,SAACvB,EAAQL,GAC9BgM,EAAe3L,GACf4L,EAAgBjM,GAChBmJ,GAAc,IAiEmCtH,YAAaA,IACxD,kBAAC,IAAD,MACA,kBAAC,IAAD,U,6nBChLV,IAAMnE,GAAOC,IAAOC,IAAV,MAMJ6P,GAAQ9P,IAAOC,IAAV,MAiDI8P,OAtBf,WAAgB,IAAD,EACahP,mBAAS,IADtB,mBACNiP,EADM,KACCvE,EADD,KAEPxD,EAAMkE,iBAAO,MAYnB,OAVAhJ,qBAAU,WAKR,OAJAkJ,aAAapE,EAAIqE,SACjBrE,EAAIqE,QAAUC,YAAW,WACvBd,GAAS,KACR,KACI,WACLY,aAAapE,EAAIqE,YAElB,CAAC0D,IAGF,kBAAC,GAAD,KACGA,GAAS,kBAACF,GAAD,KAAQE,GAClB,kBAAC,GAAD,CAAOR,MAAM,OAAO/D,SAAUA,MCjDpCwE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFzL,SAAS0L,eAAe,U","file":"static/js/main.2df5a248.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/warning.b9aa2a80.svg\";","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst Wrap = styled.div`\n  width: 80%;\n  height: 64px;\n  position: absolute;\n  top: 20px;\n  left: 50%;\n  transform: translate(-50%, 0);\n  z-index: 2;\n  display: none;\n`;\n\nconst InpWrap = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #D6D6D6;\n  box-shadow: 0 1px 5px rgba(0,0,0,0.1);\n  background: #ffffff;\n  border-radius: 4px;\n  overflow: hidden;\n`;\n\nconst StyledInput = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  border: none;\n  box-shadow: none;\n  outline: none;\n  padding: 0 20px 0 180px;\n  font-size: 16px;\n  position: relative;\n  z-index: 2;\n  background: transparent;\n`;\n\nconst Placeholder = styled.span`\n  position: absolute;\n  font-weight: bold;\n  left: 10px;\n  top: 50%;\n  transform: translate(0, -50%);\n  z-index: 1;\n`;\n\nconst Options = styled.div`\n  width: 100%;\n  max-height: 200px;\n  overflow-y: auto;\n  position: absolute;\n  top: 100%;\n  background: #ffffff;\n  margin-top: 5px;\n  box-shadow: 0 1px 5px rgba(0,0,0,0.1);\n`;\n\nconst Option = styled.div`\n  padding: 5px 10px;\n  cursor: pointer;\n  font-size: 14px;\n  &:hover {\n    background: #e4e4e4;\n  }\n`;\n\nconst ENTER_KEY_CODE = 13;\nconst API_KEY_YMAPS = process.env.REACT_APP_MAP_API_KEY;\nconst GEO_BASE_URL = `https://geocode-maps.yandex.ru/1.x/?apikey=${API_KEY_YMAPS}&format=json&geocode=`;\n\nconst Search = ({ selectAddress, pointAddress, cdi }) => {\n  const [variants, setVariants] = useState([]);\n  const [value, setInpValue] = useState('');\n\n  const geoCode = (cdiAddr) => {\n    const valueAddr = cdiAddr || value;\n    const searchAddr = valueAddr.split(' ').join('+');\n    const url = `${GEO_BASE_URL}${searchAddr}`;\n\n    fetch(url)\n      .then(r => r.json())\n      .then(res => {\n        if (res) {\n          const geoObjects = res.response.GeoObjectCollection.featureMember;\n          const found = geoObjects.map(item => {\n            return {\n              address: item.GeoObject.metaDataProperty.GeocoderMetaData.text,\n              coords: item.GeoObject.Point.pos,\n            }\n          })\n\n          // Пользуемся теперь полем CDI - потому сразу берем первый вариант!\n          selectOption(found[0]);\n          // if (found.length === 1) {\n          //   selectOption(found[0]);\n          // } else {\n          //   setVariants(found);\n          // }\n        }\n      })\n      .catch(e => {\n        console.log('ERROR >>>>>>', e);\n      });\n  }\n\n  const keyPressHandler = e => {\n    const {keyCode} = e;\n    if (keyCode === ENTER_KEY_CODE) geoCode();\n  }\n\n  const changeHandler = e => {\n    setInpValue(e.target.value);\n  }\n\n  const selectOption = opt => {\n    selectAddress(opt);\n    setInpValue(opt.address);\n    setVariants([]);\n  }\n\n  useEffect(() => {\n    if (pointAddress) setInpValue(pointAddress);\n  }, [pointAddress]);\n\n  useEffect(() => {\n    if (cdi) {\n      setInpValue(cdi);\n      geoCode(cdi);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cdi]);\n\n  return (\n    <Wrap>\n      <InpWrap>\n        <StyledInput\n          type=\"text\"\n          value={value}\n          onChange={changeHandler}\n          onKeyDown={keyPressHandler}\n        />\n        <Placeholder>Адрес отправления:</Placeholder>\n      </InpWrap>\n      {\n        variants && variants.length ? (\n          <Options>\n            {variants.map(item => (\n              <Option key={item.address} onClick={() => selectOption(item)}>{item.address}</Option>\n            ))}\n          </Options>\n        ) : ''\n      }\n    </Wrap>\n  )\n}\n\nexport default Search;","import React, { useEffect, Fragment } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport terminals from '../contacts.json';\nimport { Placemark } from 'react-yandex-maps';\nimport styled from 'styled-components';\n\nconst Button = styled.div`\n  padding: 5px 10px;\n  text-align: center;\n  background: #f38a69;\n  color: #ffffff;\n  border-radius: 3px;\n  cursor: pointer;\n  margin-top: 10px;\n  &:hover {\n    background: #e07f61;\n  }\n`;\n\nconst Wrap = styled.div`\n  width: 260px;\n`;\n\nconst Name = styled.div`\n  margin-bottom: 10px;\n`;\n\nconst Phone = styled.div`\n  font-weight: bold;\n  margin-top: 5px;\n`;\n\nconst Wortable = styled.div`\n  margin-top: 5px;\n`;\n\nconst Terminals = ({ selectTerminal, pointCoords }) => {\n  const balloonClickHandler = (e) => {\n    const element = e.target;\n    if (element.classList.contains('select-terminal')) {\n      const { lat, lon, address } = element.dataset;\n      selectTerminal([lat, lon], address);\n    }\n  }\n\n  const terminalIsNotSelected = item => {\n    if (!pointCoords) return true;\n    return +pointCoords[0] !== item.terminal.latitude && +pointCoords[1] !== item.terminal.longitude;\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', balloonClickHandler);\n    return () => document.removeEventListener('click', balloonClickHandler);\n  }, []);\n\n  if (!terminals || !terminals.length) return '';\n\n  return (\n    <>{\n      terminals.map((item, index) => (\n        <Fragment key={item.id}>\n          {\n            terminalIsNotSelected(item) ? (<Placemark\n              key={item.id}\n              geometry={[item.terminal.latitude, item.terminal.longitude]}\n              properties={{\n                hintContent: `${item.city} ${item.address}`,\n                balloonContentBody: ReactDOMServer.renderToStaticMarkup(\n                  <Wrap>\n                    <b>г. {item.city}</b><br />\n                    <Name>Название терминала: {item.name}</Name>\n                    {item.terminal.terminalAddress}\n                    {item.show_phones && item.show_phones.length \n                      ? item.show_phones.map((item, i) => <Phone key={i}>{item}</Phone>)\n                      : ''}\n                    {item.worktables && item.worktables[0] && item.worktables[0].work_hours\n                      ? (<Wortable>Режим работы: <b>{item.worktables[0].work_hours}</b></Wortable>)\n                      : ''}\n                    <Button\n                      data-address={item.terminal.terminalAddress}\n                      data-lat={item.terminal.latitude}\n                      data-lon={item.terminal.longitude}\n                      className=\"select-terminal\"\n                    >\n                      Выбрать\n                    </Button>\n                  </Wrap>,\n                ),\n              }}\n              options={{\n                preset: 'islands#dotIcon',\n                iconColor: '#e84d6f',\n              }}\n            />) : ''\n          }\n        </Fragment>\n      ))\n    }</>\n  )\n};\n\nexport default Terminals;","import React from 'react';\nimport styled from 'styled-components';\nimport { Placemark, Circle } from 'react-yandex-maps';\n\nconst Button = styled.div`\n  font-size: 14px;\n  z-index: 2;\n  position: absolute;\n  left: 20px;\n  bottom: 20px;\n  cursor: pointer;\n  width: 200px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #D6D6D6;\n  box-shadow: 0 1px 5px rgba(0,0,0,0.1);\n  border-radius: 3px;\n  background: #ffffff;\n  &:hover {\n    background: #f7f7f7;\n  }\n`;\n\nconst AREA_SIZE = 100;\n\nconst Entrance = ({ pointCoords, ymaps, entranceCoords, setEntranceCoords, showArea, setShowArea }) => {\n  let entranceRef = '';\n\n  const specifyEntrance = () => {\n    setShowArea(!showArea);\n    if (showArea) setEntranceCoords([]);\n  }\n\n  const circleClick = e => {\n    const coords = e.get('coords');\n    setEntranceCoords(coords);\n  }\n\n  const moveEntrance = () => {\n    const newCoords = entranceRef.geometry.getCoordinates();\n    const distance = ymaps.coordSystem.geo.getDistance(newCoords, pointCoords);\n    if (distance > AREA_SIZE) {\n      setEntranceCoords([]);\n    } else {\n      setEntranceCoords(newCoords);\n    }\n  }\n\n  return (\n    <>\n      {/* { \n        pointCoords && pointCoords.length \n          ? (\n            <Button onClick={specifyEntrance}>\n              { entranceCoords && entranceCoords.length ? 'Скрыть область' : 'Уточнить подъезд' }\n            </Button>\n          ) : ''\n      } */}\n      {\n        pointCoords && pointCoords.length && showArea ? (\n          <Circle\n            geometry={[pointCoords, AREA_SIZE]}\n            onClick={circleClick}\n            options={{\n              draggable: false,\n              fillColor: '#FFD2D2',\n              fillOpacity: 0.4,\n              strokeColor: '#FFD2D2',\n              strokeOpacity: 0.7,\n              strokeWidth: 1,\n              zIndex: 2,\n            }}\n          />\n        ) : '' \n      }\n      {\n        entranceCoords && entranceCoords.length ? (\n          <Placemark\n            modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\n            geometry={entranceCoords}\n            onDragend={moveEntrance}\n            options={{\n              draggable: true,\n              preset: 'islands#dotIcon',\n              iconColor: '#ef2c2c',\n            }}\n            properties={{\n              hintContent: 'Подъезд',\n              balloonContent: 'Подъезд - дополнительная информация',\n            }}\n            instanceRef={ref => (entranceRef = ref)}\n          />\n        ) : ''\n      }\n    </>\n  )\n};\n\nexport default Entrance;","// TODO: Add select city input\nconst pointStorageVal = {\n  cashlessOnly: \"0\",\n  city: \"Санкт-Петербург\",\n  cityID: 200601,\n  code: \"7800000000000000000000000\",\n  country_code: 643,\n  fullName: \"г. Санкт-Петербург\",\n  inPrice: \"1\",\n  isAutoCity: \"1\",\n  isTerminal: \"1\",\n  label: \"г. Санкт-Петербург\",\n  nameString: \"Санкт-Петербург г\",\n  noSendDoor: \"0\",\n  regionString: \"г. Санкт-Петербург\",\n  street: \"1\",\n  uString: \"\",\n  value: \"Санкт-Петербург\",\n};\n\nconst UseCdiService = (prevSuggestions, value) => {\n  const getCityStr = (sugg) => {\n    return [\n      sugg.region_with_type ? sugg.region_with_type : '',\n      sugg.area_with_type ? ', ' + sugg.area_with_type : '',\n      sugg.city_with_type ?  ', ' + sugg.city_with_type : '',\n      sugg.settlement_with_type ?  ', ' + sugg.settlement_with_type : '',\n      sugg.street_with_type ?  ', ' + sugg.street_with_type : '',\n      sugg.house ?  ', ' + sugg.house_type + ' ' + sugg.house : '',\n      sugg.block ?  ' ' + sugg.block_type + ' ' + sugg.block : '',\n      sugg.flat ?  ', ' + sugg.flat_type + ' ' + sugg.flat : ''\n    ].filter(Boolean).join('')\n  };\n\n  const getQuery = () => {\n    var filteredSuggestions = !!prevSuggestions && prevSuggestions.length\n      ? prevSuggestions.filter((el) => {\n          const locationCode =  el.settlement_kladr_id || el.city_kladr_id;\n  \n          return locationCode === pointStorageVal.code;\n        })\n      : [];\n  \n    var query = [];\n    var filteredQuery = [];\n  \n    if (prevSuggestions.length\n      && filteredSuggestions.length) {\n        prevSuggestions.forEach(function (elem) {\n          const str = [\n            elem.region_with_type ? elem.region_with_type : '',\n            elem.area_with_type ? elem.area_with_type : '',\n            elem.city_with_type ? elem.city_with_type : '',\n            elem.settlement_with_type ? elem.settlement_with_type : '',\n            value\n          ].filter(Boolean).join(' ');\n  \n          query.push(str);\n        });\n    } else if (prevSuggestions.length\n      && !filteredSuggestions.lengt) {\n        const pointStr = [\n          pointStorageVal && pointStorageVal.regionString ? pointStorageVal.regionString : '',\n          pointStorageVal && pointStorageVal.uString ? pointStorageVal.uString.split(',')[0] : '',\n          pointStorageVal && pointStorageVal.nameString ? pointStorageVal.nameString : '',\n          value\n        ].filter(Boolean).join(' ');\n  \n        query.push(pointStr);\n  \n        prevSuggestions.forEach(function (elem) {\n          var str = [\n            elem.region_with_type ? elem.region_with_type : '',\n            elem.area_with_type ? elem.area_with_type : '',\n            elem.city_with_type ? elem.city_with_type : '',\n            elem.settlement_with_type ? elem.settlement_with_type : '',\n            value\n          ].filter(Boolean).join(' ');\n  \n          query.push(str);\n        });\n\n    } else if (!prevSuggestions.length) {\n      const pointStr = [\n        pointStorageVal && pointStorageVal.regionString ? pointStorageVal.regionString : '',\n        pointStorageVal && pointStorageVal.uString ? pointStorageVal.uString.split(',')[0] : '',\n        pointStorageVal && pointStorageVal.fullName ? pointStorageVal.fullName : '',\n        value\n      ].filter(Boolean).join(' ');\n  \n      query.push(pointStr);\n    }\n  \n    query.forEach(function (el) {\n      if (filteredQuery.indexOf(el) === -1) {\n        filteredQuery.push(el);\n      }\n    })\n  \n    return filteredQuery;\n  };\n\n  return { getQuery, getCityStr };\n}\n\nexport default UseCdiService;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport UseDebouncedFunc from './UseDebounced';\nimport UseCdiService from './UseCdiService';\nimport WarningSvg from '../warning.svg'\n\nimport cities from '../cities.json';\nconst citiesArr = cities.cities.map(c => c.city);\n\nconst Wrap = styled.div`\n  position: relative;\n  margin-bottom: 40px;\n  //padding-right: 100px;\n`;\n\n// const SelectBtn = styled.div`\n//   cursor: pointer;\n//   width: 90px;\n//   position: absolute;\n//   right: 0;\n//   top: 0;\n//   bottom: 0;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   background: #23629a;\n//   color: #ffffff;\n//   border-radius: 4px;\n//   &:hover {\n//     background: #2a73b5;\n//   }\n// `;\n\nconst Inp = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  border: 1px solid #D6D6D6;\n  box-shadow: 0 1px 5px rgba(0,0,0,0.1);\n  border-radius: 4px;\n  outline: none;\n  padding: 10px 20px;\n  font-size: 16px;\n  background: transparent;\n`;\n\nconst Options = styled.div`\n  overflow-y: auto;\n  max-height: 200px;\n  top: 100%;\n  left: 5px;\n  right: 5px;\n  background: #ffffff;\n  position: absolute;\n  z-index: 3;\n  box-shadow: 0 1px 5px rgba(0,0,0,0.1);\n  margin-top: 10px;\n  border-radius: 2px;\n`;\n\nconst Option = styled.div`\n  padding: 5px;\n  font-size: 14px;\n  cursor: pointer;\n  &:hover {\n    background: #f7f7f7;\n  }\n`;\n\nconst ErrMesg = styled.div`\n  font-size: 14px;\n  padding-top: 4px;\n  color: #e02626;\n`;\n\nconst TerminalMesg = styled.div`\npadding-left: 3px;\n  font-size: 14px;\n  padding-top: 4px;\n  color: #638844;\n  img {\n    margin-top: -2px;\n    display: block;\n    width: 20px;\n    float: left;\n    margin-right: 6px;\n  }\n`;\n\nconst CDIInput = ({ set, yandexResponse, isTerminal, setIsTerminal, setToast }) => {\n  const [value, setValue] = useState('');\n  const [prevSuggestions, setPrevSuggestions] = useState('');\n  const [cdiOptions, setCdiOptions] = useState('');\n\n  const [showError, setShowError] = useState('');\n\n  const onChangeHandler = e => {\n    setIsTerminal(false);\n    setValue(e.target.value);\n  }\n\n  const { getQuery, getCityStr } = UseCdiService(prevSuggestions, value); \n\n  // Получение OPTIONS во время ввода в строку поиска\n  const fetchAddress = () => {\n    if (!value) {\n      setCdiOptions('');\n      return false;\n    }\n\n    const url = `https://www.dellin.stage/api/v1/address/search`;\n    const data = {\n      restrict_value: true,\n      count: 20,\n      query: value,\n      // locations_boost: [{ kladr_id:\"78\" }], // ???\n      // locations: [{ kladr_id:\"78\" },{ kladr_id:\"78\" },{ kladr_id:\"47\" }], // ???\n      data: getQuery()\n    };\n\n    fetch(url, {\n      method: 'POST', \n      body: JSON.stringify(data),\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin':'*',\n        'Content-Type': 'application/json;charset=utf-8',\n      }\n    })\n      .then(r => r.json())\n      .then(res => {\n        const adresses = res.data.map(i => {\n          if (!i.value) i.value = getCityStr(i);\n          return i;\n        });\n\n        setCdiOptions(adresses);\n\n        const kladrList = {};\n      \n        const suggestions = res.data.filter(function(el) {\n          var suitable = res.type === 'clean' ? el.qc === '0' || el.qc === '1' : true;\n          if (!kladrList[el.kladr_id] && suitable) {\n            kladrList[el.kladr_id] = true;\n            return true;\n          } else {\n            return false;\n          }\n        });\n        // if (!!searchValue && suggestions.length && type === 'suggest') this._suggestions = suggestions;\n        if (suggestions.length && res.type === 'suggest') setPrevSuggestions(suggestions);\n      })\n      .catch(e => {\n        console.log('ERROR >>>>>>', e);\n      });\n  }\n\n  const debouncedFetchAddress = UseDebouncedFunc(fetchAddress, 300);\n\n  const keyPressHandler = (e) => {\n    // const isSpb = true;\n    // const cityIsInRussia = true;\n    // const code = pointStorageVal.code;\n    // const cityCode = code.length === 24 ? code : `0${code}`;\n    // const noStreet = pointStorageVal.street === '0';\n\n    debouncedFetchAddress();\n  }\n\n  const selectOption = option => {\n    // if (!citiesArr.includes(option.city)) setToast('Отправка из этого города не осуществляется!');\n    const val = option.source || option.result || option.value;\n    setIsTerminal(false);\n    setValue(val);\n    setCdiOptions('');\n    set(val);\n  }\n\n  // const clickSelectButton = () => {\n  //   set(value);\n  // }\n\n  useEffect(() => {\n    if (!value) setPrevSuggestions('');\n  }, [value])\n\n  useEffect(() => {\n    setShowError('');\n\n    const url = `https://www.dellin.stage/api/v1/address/search`;\n    const data = {\n      restrict_value: true,\n      count: 20,\n      query: yandexResponse, // !!!!\n      // locations_boost: [{ kladr_id:\"78\" }], // ???\n      // locations: [{ kladr_id:\"78\" },{ kladr_id:\"78\" },{ kladr_id:\"47\" }], // ???\n      // data: getQuery()\n    };\n\n    fetch(url, {\n      method: 'POST', \n      body: JSON.stringify(data),\n      mode: 'cors',\n      headers: {\n        'Access-Control-Allow-Origin':'*',\n        'Content-Type': 'application/json;charset=utf-8',\n      }\n    })\n      .then(r => r.json())\n      .then(res => {\n        if (res && res.data && res.data[0]) {\n          setValue(res.data[0].source || res.data[0].result || res.data[0].value);\n          // if (!citiesArr.includes(res.data[0].city)) setToast('Отправка из этого города не осуществляется!');\n          if (!res.data[0].house) {\n            setShowError('Вы указали адрес без номера дома, если все верно - просто продолжайте заполнять форму');\n          }\n        }\n\n      })\n      .catch(e => console.log('ERROR YANDEX-CDI >>>>>>>', e));\n  \n  }, [yandexResponse])\n\n  return (\n    <Wrap>\n      {/* <SelectBtn onClick={clickSelectButton}>Выбрать</SelectBtn> */}\n      <Inp type=\"text\" onChange={onChangeHandler} value={value} onKeyUp={keyPressHandler} />\n      {isTerminal && (\n        <TerminalMesg>\n          <img src={WarningSvg} alt=\"\" />\n          Отправка из терминала\n        </TerminalMesg>\n      )}\n      {showError && <ErrMesg>{showError}</ErrMesg>}\n      {cdiOptions && (\n        <Options>\n          {cdiOptions.map(item => (\n            <Option onClick={() => selectOption(item)} key={item.kladr_id}>{item.value}</Option>\n          ))}\n        </Options>\n      )}\n    </Wrap>\n  );\n}\n\nexport default CDIInput;","import { useRef } from 'react';\n\nexport default function useDebouncedFunction(func, delay) {\n  const ref = useRef(null);\n\n  return (...args) => {\n    clearTimeout(ref.current);\n    ref.current = setTimeout(() => func(...args), delay);\n  };\n}","import React, { useState, useEffect } from 'react';\nimport { YMaps, Map, GeolocationControl, ZoomControl, Placemark } from 'react-yandex-maps';\nimport styled from 'styled-components';\nimport Search from './Search';\nimport Terminals from './Terminals';\nimport Entrance from './Entrance';\n// import Zones from './Zones';\nimport CDIInput from './CDIInput';\n\nconst MapWrap = styled.div`\n  overflow: hidden;\n  border-radius: 3px;\n  box-shadow: 0px 1px 10px rgba(0,0,0,0.3);\n  position: relative;\n`;\n\nconst API_KEY_YMAPS = process.env.REACT_APP_MAP_API_KEY;\n\nconst DlMap = ({ setToast }) => {\n  let pointRef = '';\n\n  // нужно для установки адреса cdi в поле яндекса\n  const [cdiAddress, setCdiAddress] = useState('');\n\n  // Если потребуется вторая точка для уточнения координат подъезда\n  const [entranceCoords, setEntranceCoords] = useState([]);\n  const [showArea, setShowArea] = useState(false);\n\n  const [pointCoords, setPointCoords] = useState([]);\n  const [pointAddress, setPointAddress] = useState('');\n\n  const [mapRef, setMapRef] = useState(null);\n  const [ymaps, setYmaps] = useState(null);\n  const [isTerminal, setIsTerminal] = useState(false);\n\n  const fetchAddressByCoords = (coords, full) => {\n    // &kind=house&results=1 - определяет адрес как ближайший дом\n    const url =\n      `https://geocode-maps.yandex.ru/1.x/?apikey=${API_KEY_YMAPS}&format=json&geocode=${coords}${full ? '' : '&kind=house'}&results=1`\n  \n    fetch(url)\n      .then(r => r.json())\n      .then(res => {\n        if (res && \n          res.response && \n          res.response.GeoObjectCollection && \n          res.response.GeoObjectCollection.featureMember &&\n          res.response.GeoObjectCollection.featureMember[0]) {\n          const defaultAddress = \n            res.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;\n          setPointAddress(defaultAddress);\n        } else {\n          fetchAddressByCoords(coords, true)\n        }\n      })\n      .catch(e => console.log('ERROR:', e));\n  }\n\n  useEffect(() => {\n    if (ymaps && mapRef) {\n      ymaps.geolocation.get({\n        mapStateAutoApply: true\n      })\n      .then(function(result) {\n        if (result) {\n          const coords = result.geoObjects.position;\n          mapRef.setCenter(coords, 16);\n          setPointCoords(coords);\n\n          fetchAddressByCoords([...coords].reverse().join('+'));\n\n        }\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ymaps, mapRef])\n\n  const mapClick = e => {\n    setIsTerminal(false);\n    // setToast('Невозможно осуществить доставку в эту точку. Укажите адрес доставки внутри области.');\n    // Если нужен клик только по области - код ниже надо закомментировать\n    if (!showArea) {\n      const coords = e.get('coords');\n\n      setPointCoords(coords);\n      fetchAddressByCoords([...coords].reverse().join('+'));\n    }\n  }\n\n  const movePoint = () => {\n    const newCoords = pointRef.geometry.getCoordinates();\n    setPointCoords(newCoords);\n    fetchAddressByCoords([...newCoords].reverse().join('+'));\n    setIsTerminal(false);\n  }\n\n  const selectAddress = (item) => {\n    const { address, coords } = item;\n    const coordArr = coords.split(' ').reverse();\n    const zoom = 17;\n    setPointCoords(coordArr);\n    setPointAddress(address);\n    setEntranceCoords([]);\n    mapRef.setCenter(coordArr, zoom);\n  }\n\n  useEffect(() => {\n    if (pointCoords && mapRef) mapRef.balloon.close();\n  }, [pointCoords, mapRef]);\n\n  const selectTerminal = (coords, address) => {\n    setPointCoords(coords);\n    setPointAddress(address);\n    setIsTerminal(true);\n  }\n\n  // const SetTestCoords = () => {\n  //   const myCoords = [59.840921599999994, 30.493900800000002];\n  //   const myZoom = 16;\n  //   setPointCoords(myCoords);\n  //   mapRef.setCenter(myCoords, myZoom);\n  // }\n\n  // useEffect(() => {\n  //   if (pointAddress)\n  //     console.log('[CDI] >>>>>>', pointAddress, '>>>>>>>>', pointCoords);\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [pointAddress]);\n\n  return (\n    <YMaps query={{ apikey: API_KEY_YMAPS }}>\n      <CDIInput\n        set={setCdiAddress}\n        yandexResponse={pointAddress}\n        isTerminal={isTerminal}\n        setIsTerminal={setIsTerminal}\n        setToast={setToast}\n      />\n      <MapWrap>\n        <Search cdi={cdiAddress} selectAddress={selectAddress} pointAddress={pointAddress} />\n        <Map\n          modules={['geolocation', 'geocode', 'coordSystem.geo']}\n          onLoad={setYmaps}\n          onClick={mapClick}\n          width={'100%'}\n          height={'500px'}\n          defaultState={{ center: [55.75, 37.57], zoom: 12 }}\n          options={{ suppressMapOpenBlock: true }}\n          instanceRef={setMapRef}\n        >\n          {\n            pointCoords && pointCoords.length ? (\n              <Placemark\n                modules={['geoObject.addon.balloon', 'geoObject.addon.hint']}\n                onDragend={movePoint}\n                geometry={pointCoords}\n                options={{ draggable: !showArea }}\n                properties={{\n                  hintContent: pointAddress,\n                  balloonContent: '<div style=\"width: 200px;\">' + pointAddress + '</div>'\n                }}\n                instanceRef={ref => (pointRef = ref)}\n              />\n            ) : ''\n          }\n          <Entrance\n            entranceCoords={entranceCoords}\n            setEntranceCoords={setEntranceCoords}\n            pointCoords={pointCoords}\n            showArea={showArea}\n            setShowArea={setShowArea}\n            ymaps={ymaps}\n          />\n          {/* <Zones\n            showArea={showArea}\n            setPointCoords={setPointCoords}\n            fetchAddressByCoords={fetchAddressByCoords}\n          /> */}\n          <Terminals selectTerminal={selectTerminal} pointCoords={pointCoords} />\n          <ZoomControl />\n          <GeolocationControl />\n        </Map>\n      </MapWrap>\n    </YMaps>\n  )\n}\n\nexport default DlMap;","import React, { useEffect, useState, useRef } from 'react';\nimport DlMap from './DlMap';\nimport styled from 'styled-components';\n\nconst Wrap = styled.div`\n  width: 800px;\n  margin: 0 auto;\n  padding: 40px 10px 100px 10px;\n`;\n\nconst Toast = styled.div`\n  width: 300px;\n  padding: 10px 20px;\n  color: #ffffff;\n  border-radius: 4px;\n  box-shadow: 0px 1px 10px rgba(0,0,0,0.3);\n  position: fixed;\n  right: 30px;\n  bottom: 30px;\n  background: #e04439;\n  z-index: 100;\n  font-size: 14px;\n\n  animation: fadeIn 0.3s ease;\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      right: -100px;\n    }\n    to {\n      opacity: 1;\n      right: 30px;\n    }\n  }\n`;\n\nfunction App() {\n  const [toast, setToast] = useState('');\n  const ref = useRef(null);\n\n  useEffect(() => {\n    clearTimeout(ref.current);\n    ref.current = setTimeout(() => {\n      setToast(false);\n    }, 2000);\n    return () => {\n      clearTimeout(ref.current);\n    }\n  }, [toast]);\n\n  return (\n    <Wrap>\n      {toast && <Toast>{toast}</Toast>}\n      <DlMap width=\"100%\" setToast={setToast} />\n    </Wrap>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}